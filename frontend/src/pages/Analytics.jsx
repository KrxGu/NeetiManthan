import React, { useState, useEffect } from 'react';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, PieChart, Pie, Cell, ResponsiveContainer } from 'recharts';
import { TrendingUp, Users, MessageSquare, Target, Download, RefreshCw } from 'lucide-react';
import toast from 'react-hot-toast';
import { apiService } from '../services/api';
import { formatNumber } from '../utils/helpers';
import jsPDF from 'jspdf';

const SENTIMENT_COLORS = {
  positive: '#22c55e',
  negative: '#ef4444',
  neutral: '#6b7280'
};

function Analytics() {
  const [analytics, setAnalytics] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetchAnalytics();
  }, []);

  const fetchAnalytics = async () => {
    try {
      setLoading(true);
      const response = await apiService.getAnalytics();
      setAnalytics(response.data);
    } catch (error) {
      console.error('Analytics fetch error:', error);
      if (error.response?.status === 404) {
        toast.error('No data available. Please process some comments first.');
      } else {
        toast.error('Failed to load analytics');
      }
    } finally {
      setLoading(false);
    }
  };

  const handleExport = async () => {
    if (!analytics) {
      toast.error('No data to export');
      return;
    }

    try {
      // Create new PDF document
      const pdf = new jsPDF();
      let yPosition = 20;
      const pageWidth = 190;
      const leftMargin = 20;

      // Set up document properties
      pdf.setProperties({
        title: 'Neeti Manthan - Analytics Report',
        subject: 'Public Comment Analysis Report',
        author: 'Ministry of Corporate Affairs',
        creator: 'Neeti Manthan'
      });

      // Helper function to check and add new page
      const checkPageBreak = (requiredSpace = 20) => {
        if (yPosition > 270 - requiredSpace) {
          pdf.addPage();
          yPosition = 20;
        }
      };

      // Header with government branding
      pdf.setFontSize(16);
      pdf.setFont('helvetica', 'bold');
      pdf.text('MINISTRY OF CORPORATE AFFAIRS', leftMargin, yPosition);
      yPosition += 8;
      pdf.text('GOVERNMENT OF INDIA', leftMargin, yPosition);
      yPosition += 15;

      // Add separator line
      pdf.setLineWidth(0.5);
      pdf.line(leftMargin, yPosition, leftMargin + pageWidth - 20, yPosition);
      yPosition += 15;

      // Title
      pdf.setFontSize(20);
      pdf.setFont('helvetica', 'bold');
      pdf.text('PUBLIC COMMENT ANALYSIS REPORT', leftMargin, yPosition);
      yPosition += 10;

      pdf.setFontSize(14);
      pdf.setFont('helvetica', 'normal');
      pdf.text('Generated by Neeti Manthan AI Platform', leftMargin, yPosition);
      yPosition += 8;

      const reportDate = new Date().toLocaleDateString('en-IN', { 
        year: 'numeric', 
        month: 'long', 
        day: 'numeric',
        timeZone: 'Asia/Kolkata'
      });
      pdf.text(`Report Date: ${reportDate}`, leftMargin, yPosition);
      yPosition += 20;

      // Executive Summary
      checkPageBreak(40);
      pdf.setFontSize(16);
      pdf.setFont('helvetica', 'bold');
      pdf.text('EXECUTIVE SUMMARY', leftMargin, yPosition);
      yPosition += 12;

      pdf.setFontSize(11);
      pdf.setFont('helvetica', 'normal');
      const summaryText = `This report provides a comprehensive analysis of public comments received on the current policy draft. The analysis includes sentiment distribution, engagement metrics, and key insights derived from ${analytics.total_comments} total comments processed through advanced AI sentiment analysis.`;
      const summaryLines = pdf.splitTextToSize(summaryText, pageWidth - 20);
      summaryLines.forEach(line => {
        pdf.text(line, leftMargin, yPosition);
        yPosition += 6;
      });
      yPosition += 10;

      // Key Metrics Section
      checkPageBreak(60);
      pdf.setFontSize(16);
      pdf.setFont('helvetica', 'bold');
      pdf.text('KEY METRICS', leftMargin, yPosition);
      yPosition += 12;

      pdf.setFontSize(12);
      pdf.setFont('helvetica', 'normal');

      // Create metrics table
      const metrics = [
        ['Total Comments Received', analytics.total_comments.toLocaleString()],
        ['Comments Successfully Processed', analytics.processed_comments.toLocaleString()],
        ['Processing Success Rate', `${((analytics.processed_comments / analytics.total_comments) * 100).toFixed(1)}%`],
        ['Average AI Confidence Score', `${(analytics.average_confidence * 100).toFixed(1)}%`],
        ['Unique Policy Clauses Mentioned', analytics.top_clauses.length.toString()],
        ['Current Policy Draft', analytics.processing_summary.current_draft || 'N/A']
      ];

      metrics.forEach(([label, value]) => {
        pdf.setFont('helvetica', 'bold');
        pdf.text(`${label}:`, leftMargin, yPosition);
        pdf.setFont('helvetica', 'normal');
        pdf.text(value, leftMargin + 80, yPosition);
        yPosition += 8;
      });
      yPosition += 10;

      // Sentiment Analysis Section
      checkPageBreak(80);
      pdf.setFontSize(16);
      pdf.setFont('helvetica', 'bold');
      pdf.text('SENTIMENT ANALYSIS', leftMargin, yPosition);
      yPosition += 12;

      pdf.setFontSize(11);
      pdf.setFont('helvetica', 'normal');
      const sentimentExplanation = 'Sentiment analysis categorizes public comments into positive, negative, and neutral sentiments using advanced natural language processing. This provides insights into public opinion and reception of the policy draft.';
      const sentimentLines = pdf.splitTextToSize(sentimentExplanation, pageWidth - 20);
      sentimentLines.forEach(line => {
        pdf.text(line, leftMargin, yPosition);
        yPosition += 6;
      });
      yPosition += 10;

      // Sentiment Distribution
      pdf.setFontSize(14);
      pdf.setFont('helvetica', 'bold');
      pdf.text('Sentiment Distribution:', leftMargin, yPosition);
      yPosition += 10;

      Object.entries(analytics.sentiment_distribution).forEach(([sentiment, count]) => {
        const percentage = ((count / analytics.total_comments) * 100).toFixed(1);
        const interpretation = sentiment === 'positive' ? 'Support for the policy' : 
                             sentiment === 'negative' ? 'Concerns or opposition' : 
                             'Neutral or informational feedback';
        
        pdf.setFont('helvetica', 'bold');
        pdf.text(`${sentiment.toUpperCase()}:`, leftMargin, yPosition);
        pdf.setFont('helvetica', 'normal');
        pdf.text(`${count} comments (${percentage}%) - ${interpretation}`, leftMargin + 35, yPosition);
        yPosition += 8;
      });
      yPosition += 15;

      // Sentiment Insights
      pdf.setFontSize(12);
      pdf.setFont('helvetica', 'bold');
      pdf.text('Key Insights:', leftMargin, yPosition);
      yPosition += 8;

      pdf.setFont('helvetica', 'normal');
      const totalComments = analytics.total_comments;
      const positiveRatio = analytics.sentiment_distribution.positive / totalComments;
      const negativeRatio = analytics.sentiment_distribution.negative / totalComments;
      
      let insights = [];
      if (positiveRatio > 0.6) {
        insights.push('• Strong public support indicated by high positive sentiment ratio');
      } else if (positiveRatio > 0.4) {
        insights.push('• Moderate public support with balanced sentiment distribution');
      } else {
        insights.push('• Mixed public reception requiring attention to concerns raised');
      }

      if (negativeRatio > 0.3) {
        insights.push('• Significant concerns raised that may require policy review');
      }

      if (analytics.average_confidence > 0.8) {
        insights.push('• High AI confidence in sentiment classification ensures reliable analysis');
      }

      insights.forEach(insight => {
        const insightLines = pdf.splitTextToSize(insight, pageWidth - 30);
        insightLines.forEach(line => {
          pdf.text(line, leftMargin + 5, yPosition);
          yPosition += 6;
        });
      });
      yPosition += 15;

      // Top Mentioned Clauses Section
      checkPageBreak(60);
      pdf.setFontSize(16);
      pdf.setFont('helvetica', 'bold');
      pdf.text('CLAUSE-WISE ANALYSIS', leftMargin, yPosition);
      yPosition += 12;

      pdf.setFontSize(11);
      pdf.setFont('helvetica', 'normal');
      const clauseExplanation = 'This section identifies which specific clauses of the policy draft received the most public attention and comments, helping prioritize areas for review and refinement.';
      const clauseLines = pdf.splitTextToSize(clauseExplanation, pageWidth - 20);
      clauseLines.forEach(line => {
        pdf.text(line, leftMargin, yPosition);
        yPosition += 6;
      });
      yPosition += 10;

      pdf.setFontSize(14);
      pdf.setFont('helvetica', 'bold');
      pdf.text('Most Discussed Clauses:', leftMargin, yPosition);
      yPosition += 10;

      analytics.top_clauses.slice(0, 10).forEach((clause, index) => {
        checkPageBreak(15);
        pdf.setFont('helvetica', 'bold');
        pdf.text(`${index + 1}. `, leftMargin, yPosition);
        
        pdf.setFont('helvetica', 'normal');
        const clauseText = clause.clause.length > 100 ? 
          clause.clause.substring(0, 100) + '...' : 
          clause.clause;
        const clauseTextLines = pdf.splitTextToSize(clauseText, pageWidth - 35);
        
        clauseTextLines.forEach((line, lineIndex) => {
          pdf.text(line, leftMargin + (lineIndex === 0 ? 10 : 5), yPosition);
          if (lineIndex < clauseTextLines.length - 1) yPosition += 6;
        });
        
        pdf.setFont('helvetica', 'bold');
        pdf.text(`(${clause.mentions} mentions)`, leftMargin + 5, yPosition + 6);
        yPosition += 15;
      });
      yPosition += 10;

      // Recommendations Section
      checkPageBreak(60);
      pdf.setFontSize(16);
      pdf.setFont('helvetica', 'bold');
      pdf.text('RECOMMENDATIONS', leftMargin, yPosition);
      yPosition += 12;

      pdf.setFontSize(11);
      pdf.setFont('helvetica', 'normal');
      
      const recommendations = [
        'Focus attention on clauses with high mention counts for detailed review',
        'Address specific concerns raised in negative sentiment comments',
        'Leverage positive feedback to strengthen policy communication',
        'Consider public consultation sessions for highly discussed clauses',
        'Monitor sentiment trends as policy development progresses'
      ];

      recommendations.forEach(rec => {
        const recLines = pdf.splitTextToSize(`• ${rec}`, pageWidth - 25);
        recLines.forEach(line => {
          pdf.text(line, leftMargin + 5, yPosition);
          yPosition += 6;
        });
        yPosition += 3;
      });
      yPosition += 15;

      // Technical Details Section
      checkPageBreak(40);
      pdf.setFontSize(16);
      pdf.setFont('helvetica', 'bold');
      pdf.text('TECHNICAL METHODOLOGY', leftMargin, yPosition);
      yPosition += 12;

      pdf.setFontSize(11);
      pdf.setFont('helvetica', 'normal');
      const methodology = [
        `AI Model: ${analytics.processing_summary.sentiment_model || 'Advanced NLP Model'}`,
        'Analysis includes sentiment classification, confidence scoring, and clause linking',
        'Comments processed through multi-stage AI pipeline for accuracy',
        'Results validated through confidence thresholds and quality checks'
      ];

      methodology.forEach(item => {
        const methodLines = pdf.splitTextToSize(`• ${item}`, pageWidth - 25);
        methodLines.forEach(line => {
          pdf.text(line, leftMargin + 5, yPosition);
          yPosition += 6;
        });
      });

      // Add footer with page numbers
      const pageCount = pdf.internal.getNumberOfPages();
      for (let i = 1; i <= pageCount; i++) {
        pdf.setPage(i);
        pdf.setFontSize(8);
        pdf.setFont('helvetica', 'normal');
        pdf.text(`Page ${i} of ${pageCount}`, 170, 290);
        pdf.text('Confidential - Government Use Only', leftMargin, 290);
        pdf.text('Generated by Neeti Manthan AI Platform', leftMargin, 285);
      }

      // Save the PDF
      const filename = `neeti_manthan_analytics_report_${new Date().toISOString().split('T')[0]}.pdf`;
      pdf.save(filename);
      
      toast.success('Comprehensive analytics report downloaded successfully');
    } catch (error) {
      console.error('Error generating analytics PDF:', error);
      toast.error('Failed to generate analytics report. Please try again.');
    }
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="loading-spinner h-8 w-8"></div>
      </div>
    );
  }

  if (!analytics) {
    return (
      <div className="text-center py-12">
        <MessageSquare className="h-16 w-16 text-gray-400 mx-auto mb-4" />
        <h2 className="text-xl font-semibold text-gray-900 mb-2">No Analytics Data</h2>
        <p className="text-gray-600 mb-6">
          Upload a draft document and process some comments to see analytics.
        </p>
        <button
          onClick={fetchAnalytics}
          className="btn btn-primary"
        >
          <RefreshCw className="h-4 w-4 mr-2" />
          Refresh
        </button>
      </div>
    );
  }

  // Prepare chart data
  const sentimentData = Object.entries(analytics.sentiment_distribution).map(([sentiment, count]) => ({
    sentiment: sentiment.charAt(0).toUpperCase() + sentiment.slice(1),
    count,
    color: SENTIMENT_COLORS[sentiment]
  }));

  const clauseData = analytics.top_clauses.slice(0, 10).map(clause => ({
    clause: clause.clause.length > 20 ? clause.clause.substring(0, 20) + '...' : clause.clause,
    mentions: clause.mentions
  }));

  const stats = [
    {
      name: 'Total Comments',
      value: analytics.total_comments,
      icon: MessageSquare,
      color: 'text-primary-600',
      bgColor: 'bg-primary-50'
    },
    {
      name: 'Processed',
      value: analytics.processed_comments,
      icon: Target,
      color: 'text-success-600',
      bgColor: 'bg-success-50'
    },
    {
      name: 'Avg Confidence',
      value: `${(analytics.average_confidence * 100).toFixed(1)}%`,
      icon: TrendingUp,
      color: 'text-warning-600',
      bgColor: 'bg-warning-50'
    },
    {
      name: 'Unique Clauses',
      value: analytics.top_clauses.length,
      icon: Users,
      color: 'text-purple-600',
      bgColor: 'bg-purple-50'
    }
  ];

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-2xl font-bold text-gray-900">Analytics Dashboard</h1>
          <p className="text-gray-600">Comprehensive analysis of public comments</p>
        </div>
        <div className="flex items-center space-x-3">
          <button
            onClick={fetchAnalytics}
            className="btn btn-secondary btn-sm"
          >
            <RefreshCw className="h-4 w-4 mr-2" />
            Refresh
          </button>
          <button
            onClick={handleExport}
            className="btn btn-primary btn-sm"
          >
            <Download className="h-4 w-4 mr-2" />
            Export PDF Report
          </button>
        </div>
      </div>

      {/* Stats Grid */}
      <div className="grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-4">
        {stats.map((stat) => (
          <div key={stat.name} className="card">
            <div className="card-body">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600">{stat.name}</p>
                  <p className="text-2xl font-semibold text-gray-900">{formatNumber(stat.value)}</p>
                </div>
                <div className={`p-3 rounded-lg ${stat.bgColor}`}>
                  <stat.icon className={`h-6 w-6 ${stat.color}`} />
                </div>
              </div>
            </div>
          </div>
        ))}
      </div>

      {/* Charts */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Sentiment Distribution */}
        <div className="card">
          <div className="card-header">
            <h2 className="text-lg font-semibold text-gray-900">Sentiment Distribution</h2>
          </div>
          <div className="card-body">
            <ResponsiveContainer width="100%" height={300}>
              <PieChart>
                <Pie
                  data={sentimentData}
                  cx="50%"
                  cy="50%"
                  labelLine={false}
                  label={({ sentiment, count, percent }) => 
                    `${sentiment}: ${count} (${(percent * 100).toFixed(0)}%)`
                  }
                  outerRadius={80}
                  fill="#8884d8"
                  dataKey="count"
                >
                  {sentimentData.map((entry, index) => (
                    <Cell key={`cell-${index}`} fill={entry.color} />
                  ))}
                </Pie>
                <Tooltip />
              </PieChart>
            </ResponsiveContainer>
          </div>
        </div>

        {/* Top Mentioned Clauses */}
        <div className="card">
          <div className="card-header">
            <h2 className="text-lg font-semibold text-gray-900">Most Mentioned Clauses</h2>
          </div>
          <div className="card-body">
            <ResponsiveContainer width="100%" height={300}>
              <BarChart data={clauseData} layout="horizontal">
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis type="number" />
                <YAxis dataKey="clause" type="category" width={80} />
                <Tooltip />
                <Bar dataKey="mentions" fill="#3b82f6" />
              </BarChart>
            </ResponsiveContainer>
          </div>
        </div>
      </div>

      {/* Detailed Analysis */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Processing Summary */}
        <div className="card">
          <div className="card-header">
            <h2 className="text-lg font-semibold text-gray-900">Processing Summary</h2>
          </div>
          <div className="card-body space-y-4">
            <div className="flex items-center justify-between">
              <span className="text-sm text-gray-600">Model Type</span>
              <span className="text-sm font-medium text-gray-900 capitalize">
                {analytics.processing_summary.sentiment_model}
              </span>
            </div>
            <div className="flex items-center justify-between">
              <span className="text-sm text-gray-600">Clauses Extracted</span>
              <span className="text-sm font-medium text-gray-900">
                {analytics.processing_summary.clauses_extracted}
              </span>
            </div>
            <div className="flex items-center justify-between">
              <span className="text-sm text-gray-600">Current Draft</span>
              <span className="text-sm font-medium text-gray-900">
                {analytics.processing_summary.current_draft || 'None'}
              </span>
            </div>
            <div className="flex items-center justify-between">
              <span className="text-sm text-gray-600">Processing Rate</span>
              <span className="text-sm font-medium text-success-600">
                {analytics.processed_comments === analytics.total_comments ? '100%' : 
                 `${((analytics.processed_comments / analytics.total_comments) * 100).toFixed(1)}%`}
              </span>
            </div>
          </div>
        </div>

        {/* Top Clauses List */}
        <div className="card">
          <div className="card-header">
            <h2 className="text-lg font-semibold text-gray-900">Clause Details</h2>
          </div>
          <div className="card-body">
            <div className="space-y-3 max-h-80 overflow-y-auto scrollbar-thin">
              {analytics.top_clauses.map((clause, index) => (
                <div key={index} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                  <div className="flex-1">
                    <p className="text-sm font-medium text-gray-900">{clause.clause}</p>
                    <p className="text-xs text-gray-600">{clause.mentions} mentions</p>
                  </div>
                  <div className="ml-4">
                    <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-primary-100 text-primary-800">
                      #{index + 1}
                    </span>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>

      {/* Insights */}
      <div className="card">
        <div className="card-header">
          <h2 className="text-lg font-semibold text-gray-900">Key Insights</h2>
        </div>
        <div className="card-body">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            <div className="text-center">
              <div className="text-2xl font-bold text-success-600 mb-2">
                {((analytics.sentiment_distribution.positive / analytics.total_comments) * 100).toFixed(1)}%
              </div>
              <p className="text-sm text-gray-600">Comments are positive</p>
            </div>
            
            <div className="text-center">
              <div className="text-2xl font-bold text-primary-600 mb-2">
                {analytics.top_clauses.length > 0 ? analytics.top_clauses[0].clause : 'N/A'}
              </div>
              <p className="text-sm text-gray-600">Most discussed clause</p>
            </div>
            
            <div className="text-center">
              <div className="text-2xl font-bold text-warning-600 mb-2">
                {(analytics.average_confidence * 100).toFixed(1)}%
              </div>
              <p className="text-sm text-gray-600">Average confidence</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

export default Analytics;
